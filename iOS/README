/*Copyright (C) 2011 by RGBeast

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/

Version 1.1.0

RGBeast is:
Jon Andrews - www.jonandrewsdesign.com/
David Broughton - www.pinwheeloperations.com/
Alex Miner - www.alexminer.com
Matthew Vroman - www.matthewvroman.com

RGBlaster is a touch-based arcade game made by the development team of RGBeast. The game is built in Open Frameworks and largely consists of code written in C++. The art is a mixture of 8-bit, 16-bit, and 32-bit sprites with an arcade-feel. The sound inside this project is a mixture of chip tunes and generative sound effects. The mechanics of RGBlaster focuses on quick reflexes and color matching while integrating different resolution states to indicate how well the player is doing. 

RGBlaster was originally created for a 400-level Interactive Media class at Bradley University, however the students behind the game believe in open-sourcing and thus have decided put the code under an MIT license. The idea behind this move is to allow for other developers to play with a pre-built framework for sprite sheet games. Stripping this project clean of game mechanic code leaves a developer with basic screen state functionality, sound management, sprite sheet management, animation, hit detection, and more. The developer can also choose to build on to RGBlaster and increase the functionality of the current game. Adding additional levels, movement patterns, or power-ups would be a welcomed addition.